# 描述
# 定义一个二维数组 N*M ，如 5 × 5 数组下所示：
#
#
# int maze[5][5] = {
# 0, 1, 0, 0, 0,
# 0, 1, 1, 1, 0,
# 0, 0, 0, 0, 0,
# 0, 1, 1, 1, 0,
# 0, 0, 0, 1, 0,
# };
#
#
# 它表示一个迷宫，其中的1表示墙壁，0表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的路线。入口点为[0,0],既第一格是可以走的路。
#
#
# 数据范围： 2 \le n,m \le 10 \2≤n,m≤10  ， 输入的内容只包含 0 \le val \le 1 \0≤val≤1
#
# 输入描述：
# 输入两个整数，分别表示二维数组的行数，列数。再输入相应的数组，其中的1表示墙壁，0表示可以走的路。数据保证有唯一解,不考虑有多解的情况，即迷宫只有一条通道。
#
# 输出描述：
# 左上角到右下角的最短路径，格式如样例所示。

# 输入
# 5 5
# 0 1 0 0 0
# 0 1 1 1 0
# 0 0 0 0 0
# 0 1 1 1 0
# 0 0 0 1 0
# 输出
# (0,0)
# (1,0)
# (2,0)
# (2,1)
# (2,2)
# (2,3)
# (2,4)
# (3,4)
# (4,4)


# 为了方便，就不再处理输入，直接用变量表示
# dfs


m,n = 5,5
res = [
    [0, 1, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 1, 0],
]

def walf(i,j,pos=[(0,0)]):
    # right
    if j + 1 < n and res[i][j+1] == 0:
        if (i,j+1) not in pos:
            walf(i,j+1,pos+[(i,j+1)])
    # left
    if j - 1 >= 0 and res[i][j-1] == 0:
        if (i,j-1) not in pos:
            walf(i,j-1,pos+[(i,j-1)])
    # down
    if i + 1 < m and res[i+1][j] == 0:
        if (i+1,j) not in pos:
            walf(i+1,j,pos+[(i+1,j)])
    # up
    if i - 1 >= 0 and res[i-1][j] == 0:
        if (i-1,j) not in pos:
            walf(i-1,j,pos+[(i-1,j)])

    if (i,j) == (n-1,m-1):
        for p in pos:
            print(p)
walf(0,0)
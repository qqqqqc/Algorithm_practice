#动态规划的大致思路是把一个复杂的问题转化成一个分阶段逐步递推的过程，从简单的初始状态一步一步递推，最终得到复杂问题的最优解。

# 基本思想与策略编辑:
# 由于动态规划解决的问题多数有重叠子问题这个特点，为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中。
#
# 1. 拆分问题：根据问题的可能性把问题划分成通过递推或者递归一步一步实现。
# 关键就是这个步骤, 动态规划有一类问题就是从后往前推到, 有时候我们很容易知道:
# 如果只有一种情况时, 最佳的选择应该怎么做.然后根据这个最佳选择往前一步推导, 得到前一步的最佳选择
# 2. 定义问题状态和状态之间的关系：用一种量化的形式表现出来, 类似于高中学的推导公式,
# 因为这种式子很容易用程序写出来, 也可以说对程序比较亲和(也就是最后所说的状态转移方程式)
# 3. 动态规划算法的基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），
# 按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，
# 列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。
#
# 我的理解是：比如我们找到最优解, 我们应该讲最优解保存下来,
# 为了往前推导时能够使用前一步的最优解, 在这个过程中难免有一些相比于最优解差的解, 此时我们应该放弃, 只保存最优解,
# 这样我们每一次都把最优解保存了下来, 大大降低了时间复杂度。
# 动态规划解决问题的过程分为两步：
#
# 1. 寻找状态转移方程式
#
# 2. 利用状态转移方程式自底向上求解问题


# 动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。
# 每一个解都对应于一个值，我们希望找到具有最优值的解。动态规划算法与分治法类似，
# 其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。
# 与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。
# 若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。
# 如果我们能够保存已解决的子问题的答案，而在需要时再找出已求得的答案，这样就可以避免大量的重复计算，节省时间。
# 我们可以用一个表来记录所有已解的子问题的答案。不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。
# 这就是动态规划法的基本思路。
